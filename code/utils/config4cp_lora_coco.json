{
    "sentence": "", 
    "mmc_pred": "", 
    "llama2_pred": "", 
    "vicuna_pred": "", 
    "player_meta_prompt": "You are a debater. Welcome to the constituency parsing competition, which will be conducted in a debate format. It's not necessary to fully agree with each other's perspectives, as our objective is to find the correct constituency parsing result. constituency parsing aims to dissect sentences into their constituent parts and represent it as a hierarchical structure of bracketing. You need to identify various constituencies in the sentence (such as noun phrases, verb phrases, Prepositional phrase, etc.) and combine these constituencies together. Each element within the bracketing '(' and ')' should represent either a single word or a grouped phrase. The debate topic is stated as follows: What is the correct constituency parsing result of the following sentence: \"##sentence##\" ?",
    "moderator_meta_prompt": "You are a moderator. There will be two debaters participating in a constituency parsing debate competition. They will present their constituency parsing results and discuss the correct constituency parsing result of the given sentence: \"##sentence##\". At the end of each round, you will evaluate the constituency parsing candidates based on the following criteria:\nAccuracy: The boundaries of each constituency must be precisely defined, ensuring the correct start and end positions for every constituency.\nCompleteness: Cover all words in the sentence, ensuring that no part is omitted.\nNon-crossing: Maintain a non-crossing structure, meaning that no two constituencies should partially overlap.\nConsistency: Phrases or constituencies of the same type should be parsed in the same manner.\nHierarchy: constituencies should be organized in a hierarchical structure, forming nested bracketing structure",
    "model_prompt1":"Please use the provided image to help understand the context and structure of the sentence, and then perform constituency parsing on the following sentence: '##sentence##' -->",
    "affirmative_prompt": "However, there are traditional models that disagree with the above result. Please correct the previous constituent syntax analysis result based on the traditional model's result '##mmc_pred##'.",
    "negative_prompt":"I provide the constituency parsing result of the sentence that I believe is correct. However, You disagree with my result. Therefore, please provide the answer you think is right and output it.  Sentence: \"##sentence##\"\nMy_result: ##vicuna_pred##\nYour_result:",
    "moderator_prompt": "Now the ##round## round of debate for both sides has ended. You, as the moderator, will evaluate both sides' constituency parsing results and determine if there is a clear preference for a constituency parsing candidate. If so, please give the final \"constituency parsing result\" that you think is correct, which from either the affirmative or negative side, and the debate will conclude. If not, the debate will continue to the next round and \"constituency parsing result\" will be empty. Please output your answer in json format, with the format as follows: {\"whether there is a preference\": \"Yes or No\", \"supported side\": \"Affirmative or Negative or None\", \"constituency parsing result\": \"\"}. Please strictly output in JSON format, do not output irrelevant content.\nHere are some examples for your reference and learning. Please format the output according to the examples.\n\nSentence:\"The children ate the cake with a spoon\"\nAffirmative: ((The children) ((ate (the cake)) (with (a spoon))))\nNegative: (The (children ((ate (the cake)) (with (a spoon)))))\nModerator: {\"whether there is a preference\": \"Yes\", \"supported side\": \"Affirmative\", \"constituency parsing result\": \"((The children) ((ate (the cake)) (with (a spoon))))\"}\n\nSentence: \"The little boy likes red tomatoes\"\nAffirmative: (The (little boy) (likes (red tomatoes)))\nNegative: ((The little boy) (likes (red tomatoes)))\nModerator: {\"whether there is a preference\": \"Yes\", \"supported side\": \"Negative\", \"constituency parsing result\": \"((The little boy) (likes (red tomatoes)))\"}\n\nSentence: \"One man wrapped several diamonds in the knot of his tie\"\nAffirmative: ((One man wrapped (several diamonds) (in (the knot) (of (his tie)))))\nNegative: ((One man) (wrapped several diamonds) (in (the knot) (of his tie)))\nModerator: {\"whether there is a preference\": \"No\", \"supported side\": \"None\", \"constituency parsing\": \"\"}\n\nSentence: \"##sentence##\"\nAffirmative: ##aff_ans##\nNegative: ##neg_ans##\nModerator:",
    "debate_prompt":"I provide the constituency parsing result of the sentence that I believe is correct. However, You disagree with my result. Therefore, please provide the answer you think is right, and output it in a nested bracketing structure as follows: ((A (B C)) (D E)). The output must be a nested bracketing structure without any extra content, containing all the words of the sentence, and the number of \"(\" must match the number of \")\". Please strictly adhere to the nested bracketing structure and do not output any irrelevant content. Here are some examples for your reference and learning. Please format the output according to the examples.\n\nSentence: \"The children ate the cake with a spoon\"\nMy_result: (The (children ((ate (the cake)) (with (a spoon)))))\nYour_result: ((The children) ((ate (the cake)) (with (a spoon))))\n\nSentence: \"The little boy likes red tomatoes\"\nMy_result:(The (little boy) (likes (red tomatoes)))\nYour_result: ((The little boy) (likes (red tomatoes)))\n\nSentence: \"One man wrapped several diamonds in the knot of his tie\"\nMy_result: ((One man wrapped (several diamonds) (in (the knot) (of (his tie)))))\nYour_result: ((One man) (wrapped (several diamonds) (in (the knot) (of (his tie)))))\n\nSentence: \"##sentence##\"\nMy_result: ##oppo_ans##\nYour_result:",
    "judge_prompt_last": "Now please give the final constituency parsing result that you think is correct based on the sentence. Please output your answer in json format, with the format as follows: {\"supported side\": \"Affirmative or Negative\", \"constituency parsing result\": \"\"}. Please strictly output in JSON format, do not output irrelevant content. Here are some examples for your reference and learning. Please format the output according to the examples.\n\nSentence: \"The children ate the cake with a spoon\"\nAffirmative: ((The children) ((ate (the cake)) (with (a spoon)))),\nNegative: (The (children ((ate (the cake)) (with (a spoon)))))\nJudge: {\"supported side\": \"Affirmative\", \"constituency parsing result\": \"((The children) ((ate (the cake)) (with (a spoon))))\"}\n\nSentence: \"The little boy likes red tomatoes\"\nAffirmative: (The (little boy) (likes (red tomatoes)))\nNegative: ((The little boy) (likes (red tomatoes)))\nJudge: {\"supported side\": \"Negative\", \"constituency parsing result\": \"((The little boy) (likes (red tomatoes)))\"}\n\nSentence: \"##sentence##\"\nAffirmative: ##aff_ans##\nNegative: ##neg_ans##\nJudge:"
}
  